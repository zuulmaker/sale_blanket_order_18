<?xml version="1.0" encoding="utf-8"?>
<!--
# -*- coding: utf-8 -*-
# Copyright 2025 j.s.drees@az-zwick.com & kd.gundermann@az-zwick.com
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
# Date: 2025-06-02
# Authors: J.s.drees@az-zwick.com & kd.gundermann@az-zwick.com
Sale Blanket Order Security - Robuste Sicherheitsregeln für Odoo 18.0
======================================================================

Fehlertolerante und umfassende Sicherheitskonfiguration für Blanket Orders.

Anwendungsbeispiele:
- Verkäufer können nur ihre eigenen Blanket Orders verwalten
- Manager haben Vollzugriff auf alle Team-Orders
- Portal-User sehen nur ihre eigenen Orders
- Multi-Company: Strikte Trennung zwischen Unternehmen
- Audit-Logs für alle kritischen Sicherheitsereignisse
- Role-based Access Control für verschiedene Benutzergruppen
-->

<odoo>
    <data noupdate="0">

        <!-- ===================================================================== -->
        <!-- SECURITY GROUPS - Erweiterte Benutzergruppen für 18.0 -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: Blanket Order User - Basis-Benutzer mit eingeschränkten Rechten -->
        <record id="group_blanket_order_user" model="res.groups">
            <field name="name">Blanket Order User</field>
            <field name="category_id" ref="base.module_category_sales_sales"/>
            <field name="comment">
                Basic users can create and manage their own Blanket Orders.
                - Read/Write access to own Blanket Orders
                - No delete permissions
                - Limited wizard access
            </field>
            <field name="implied_ids" eval="[(4, ref('sales_team.group_sale_salesman'))]"/>
        </record>

        <!-- ✅ NEU: Blanket Order Manager - Erweiterte Manager-Rechte -->
        <record id="group_blanket_order_manager" model="res.groups">
            <field name="name">Blanket Order Manager</field>
            <field name="category_id" ref="base.module_category_sales_sales"/>
            <field name="comment">
                Managers have full access to all Blanket Orders and advanced features.
                - Full CRUD access to all Blanket Orders
                - Access to advanced wizards and reports
                - User management capabilities
                - System configuration access
            </field>
            <field name="implied_ids" eval="[(4, ref('sales_team.group_sale_manager')), (4, ref('group_blanket_order_user'))]"/>
        </record>

        <!-- ✅ NEU: Blanket Order Admin - System-Administrator -->
        <record id="group_blanket_order_admin" model="res.groups">
            <field name="name">Blanket Order Administrator</field>
            <field name="category_id" ref="base.module_category_administration"/>
            <field name="comment">
                System administrators with full access to all features and configurations.
                - Complete system access
                - Security configuration
                - Data migration tools
                - Advanced debugging features
            </field>
            <field name="implied_ids" eval="[(4, ref('base.group_system')), (4, ref('group_blanket_order_manager'))]"/>
        </record>

        <!-- ✅ NEU: Blanket Order Portal - Portal-Benutzer für Kunden -->
        <record id="group_blanket_order_portal" model="res.groups">
            <field name="name">Blanket Order Portal User</field>
            <field name="category_id" ref="base.module_category_website"/>
            <field name="comment">
                Portal users (customers) can view their own Blanket Orders.
                - Read-only access to own Blanket Orders
                - View order status and history
                - Download related documents
                - Request new orders through portal
            </field>
            <field name="implied_ids" eval="[(4, ref('base.group_portal'))]"/>
        </record>

        <!-- ✅ NEU: Blanket Order Readonly - Nur-Lese-Zugriff -->
        <record id="group_blanket_order_readonly" model="res.groups">
            <field name="name">Blanket Order Read Only</field>
            <field name="category_id" ref="base.module_category_sales_sales"/>
            <field name="comment">
                Read-only users for reporting and analytics purposes.
                - Read access to all Blanket Orders
                - No modification permissions
                - Access to reports and analytics
                - Suitable for management dashboards
            </field>
            <field name="implied_ids" eval="[(4, ref('sales_team.group_sale_salesman'))]"/>
        </record>

        <!-- ===================================================================== -->
        <!-- RECORD RULES - Sichere Datenzugriffskontrolle -->
        <!-- ===================================================================== -->

        <!-- BLANKET ORDER - Haupt-Record Rules -->

        <!-- ✅ VERBESSERT: User Rule - Eigene Orders + Team-Access -->
        <record id="blanket_order_rule_user" model="ir.rule">
            <field name="name">Blanket Order: User Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                '|', '|', '|',
                ('user_id', '=', user.id),
                ('team_id.member_ids', 'in', [user.id]),
                ('create_uid', '=', user.id),
                ('message_follower_ids', 'in', [user.partner_id.id])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_user'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ VERBESSERT: Manager Rule - Alle Orders mit Company-Filter -->
        <record id="blanket_order_rule_manager" model="ir.rule">
            <field name="name">Blanket Order: Manager Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                '|',
                ('company_id', '=', False),
                ('company_id', 'in', company_ids)
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_manager'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- ✅ NEU: Portal Rule - Kunden sehen nur ihre eigenen Orders -->
        <record id="blanket_order_rule_portal" model="ir.rule">
            <field name="name">Blanket Order: Portal Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                ('partner_id', '=', user.partner_id.id),
                ('state', 'in', ['open', 'done', 'expired'])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_portal'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ NEU: Readonly Rule - Alle Orders nur-lesen mit Company-Filter -->
        <record id="blanket_order_rule_readonly" model="ir.rule">
            <field name="name">Blanket Order: Read Only Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                '|',
                ('company_id', '=', False),
                ('company_id', 'in', company_ids)
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_readonly'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ NEU: Multi-Company Rule - Strikte Company-Trennung -->
        <record id="blanket_order_rule_multicompany" model="ir.rule">
            <field name="name">Blanket Order: Multi-Company Security</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="global">True</field>
            <field name="domain_force">[
                '|',
                ('company_id', '=', False),
                ('company_id', 'in', company_ids)
            ]</field>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- BLANKET ORDER LINE - Line-spezifische Rules -->

        <!-- ✅ VERBESSERT: Line User Rule - Zugriff über Parent-Order -->
        <record id="blanket_order_line_rule_user" model="ir.rule">
            <field name="name">Blanket Order Line: User Access</field>
            <field name="model_id" ref="model_sale_blanket_order_line"/>
            <field name="domain_force">[
                '|', '|', '|',
                ('order_id.user_id', '=', user.id),
                ('order_id.team_id.member_ids', 'in', [user.id]),
                ('order_id.create_uid', '=', user.id),
                ('order_id.message_follower_ids', 'in', [user.partner_id.id])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_user'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ VERBESSERT: Line Manager Rule -->
        <record id="blanket_order_line_rule_manager" model="ir.rule">
            <field name="name">Blanket Order Line: Manager Access</field>
            <field name="model_id" ref="model_sale_blanket_order_line"/>
            <field name="domain_force">[
                '|',
                ('company_id', '=', False),
                ('company_id', 'in', company_ids)
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_manager'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- ✅ NEU: Line Portal Rule -->
        <record id="blanket_order_line_rule_portal" model="ir.rule">
            <field name="name">Blanket Order Line: Portal Access</field>
            <field name="model_id" ref="model_sale_blanket_order_line"/>
            <field name="domain_force">[
                ('order_id.partner_id', '=', user.partner_id.id),
                ('order_id.state', 'in', ['open', 'done', 'expired'])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_portal'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- BLANKET ORDER TAG - Tag-System Security -->

        <!-- ✅ NEU: Tag User Rule - Alle können Tags lesen, nur Manager ändern -->
        <record id="blanket_order_tag_rule_user" model="ir.rule">
            <field name="name">Blanket Order Tag: User Access</field>
            <field name="model_id" ref="model_blanket_order_tag"/>
            <field name="domain_force">[(1, '=', 1)]</field>  <!-- Alle Tags sichtbar -->
            <field name="groups" eval="[(4, ref('group_blanket_order_user'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ NEU: Tag Manager Rule -->
        <record id="blanket_order_tag_rule_manager" model="ir.rule">
            <field name="name">Blanket Order Tag: Manager Access</field>
            <field name="model_id" ref="model_blanket_order_tag"/>
            <field name="domain_force">[(1, '=', 1)]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_manager'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- ===================================================================== -->
        <!-- WIZARD SECURITY - Wizard-spezifische Sicherheitsregeln -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: Wizard User Rule - Eigene Wizards -->
        <record id="blanket_order_wizard_rule_user" model="ir.rule">
            <field name="name">Blanket Order Wizard: User Access</field>
            <field name="model_id" ref="model_sale_blanket_order_wizard"/>
            <field name="domain_force">[('create_uid', '=', user.id)]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_user'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- ✅ NEU: Wizard Manager Rule -->
        <record id="blanket_order_wizard_rule_manager" model="ir.rule">
            <field name="name">Blanket Order Wizard: Manager Access</field>
            <field name="model_id" ref="model_sale_blanket_order_wizard"/>
            <field name="domain_force">[(1, '=', 1)]</field>  <!-- Alle Wizards -->
            <field name="groups" eval="[(4, ref('group_blanket_order_manager'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">True</field>
        </record>

        <!-- ===================================================================== -->
        <!-- FIELD-LEVEL SECURITY - Feldspezifische Sicherheit -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: Field Security für sensible Felder -->
        <record id="field_security_blanket_order_amount" model="ir.model.fields">
            <field name="model">sale.blanket.order</field>
            <field name="name">amount_total</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_user'))]"/>
        </record>

        <record id="field_security_blanket_order_company" model="ir.model.fields">
            <field name="model">sale.blanket.order</field>
            <field name="name">company_id</field>
            <field name="groups" eval="[(4, ref('base.group_multi_company'))]"/>
        </record>

        <!-- ===================================================================== -->
        <!-- AUTOMATED SECURITY ACTIONS - Sicherheits-Automatisierung -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: Security Audit Action -->
        <record id="automated_action_security_audit" model="base.automation">
            <field name="name">Blanket Order Security Audit</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="state">code</field>
            <field name="trigger">on_create</field>
            <field name="code">
# ✅ ROBUST: Sicherheits-Audit bei Erstellung
try:
    for record in records:
        # Prüfe Company-Zugehörigkeit
        if record.company_id and record.company_id not in user.company_ids:
            log(f"SECURITY WARNING: User {user.name} tried to create Blanket Order in unauthorized company {record.company_id.name}")
            raise AccessError("You are not authorized to create orders in this company.")
        
        # Prüfe Partner-Berechtigung
        if record.partner_id and not record.partner_id.active:
            log(f"SECURITY WARNING: Blanket Order created for inactive partner {record.partner_id.name}")
        
        # Audit-Log erstellen
        log(f"AUDIT: Blanket Order {record.name} created by {user.name} for partner {record.partner_id.name}")
        
except Exception as e:
    log(f"Security audit error: {e}")
</field>
            <field name="active">True</field>
        </record>

        <!-- ✅ NEU: Access Control Monitoring -->
        <record id="automated_action_access_monitoring" model="base.automation">
            <field name="name">Blanket Order Access Monitoring</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="state">code</field>
            <field name="trigger">on_write</field>
            <field name="filter_domain">[('state', '=', 'open')]</field>
            <field name="code">
# ✅ ROBUST: Überwache kritische Änderungen
try:
    for record in records:
        # Überwache State-Änderungen
        if 'state' in record._get_tracked_fields():
            old_state = record._origin.state if record._origin else 'new'
            log(f"AUDIT: Blanket Order {record.name} state changed from {old_state} to {record.state} by {user.name}")
        
        # Überwache Partner-Änderungen
        if 'partner_id' in record._get_tracked_fields():
            old_partner = record._origin.partner_id.name if record._origin and record._origin.partner_id else 'None'
            new_partner = record.partner_id.name if record.partner_id else 'None'
            log(f"AUDIT: Blanket Order {record.name} partner changed from {old_partner} to {new_partner} by {user.name}")
        
        # Überwache Amount-Änderungen
        if 'amount_total' in record._get_tracked_fields():
            old_amount = record._origin.amount_total if record._origin else 0
            log(f"AUDIT: Blanket Order {record.name} amount changed from {old_amount} to {record.amount_total} by {user.name}")
            
except Exception as e:
    log(f"Access monitoring error: {e}")
</field>
            <field name="active">True</field>
        </record>

        <!-- ===================================================================== -->
        <!-- PORTAL SECURITY - Portal-spezifische Sicherheit -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: Portal Access Rule für Anhänge -->
        <record id="attachment_rule_portal_blanket_order" model="ir.rule">
            <field name="name">Blanket Order Attachments: Portal Access</field>
            <field name="model_id" ref="base.model_ir_attachment"/>
            <field name="domain_force">[
                ('res_model', '=', 'sale.blanket.order'),
                ('res_id', 'in', [bo.id for bo in env['sale.blanket.order'].search([('partner_id', '=', user.partner_id.id)])])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_portal'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ NEU: Portal Message Access -->
        <record id="message_rule_portal_blanket_order" model="ir.rule">
            <field name="name">Blanket Order Messages: Portal Access</field>
            <field name="model_id" ref="mail.model_mail_message"/>
            <field name="domain_force">[
                ('model', '=', 'sale.blanket.order'),
                ('res_id', 'in', [bo.id for bo in env['sale.blanket.order'].search([('partner_id', '=', user.partner_id.id)])])
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_portal'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">True</field>  <!-- Erlaubt Nachrichten zu senden -->
            <field name="perm_unlink">False</field>
        </record>

        <!-- ===================================================================== -->
        <!-- INTEGRATION SECURITY - Externe Integration -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: API User Group für externe Systeme -->
        <record id="group_blanket_order_api" model="res.groups">
            <field name="name">Blanket Order API User</field>
            <field name="category_id" ref="base.module_category_technical"/>
            <field name="comment">
                Special group for API users and external system integration.
                - Limited API access to Blanket Orders
                - Read/Write permissions via API
                - Audit logging for all API operations
            </field>
            <field name="implied_ids" eval="[(4, ref('base.group_user'))]"/>
        </record>

        <!-- ✅ NEU: API Rule - Sichere API-Zugriffe -->
        <record id="blanket_order_rule_api" model="ir.rule">
            <field name="name">Blanket Order: API Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                '|',
                ('company_id', '=', False),
                ('company_id', 'in', company_ids)
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_api'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">True</field>
            <field name="perm_create">True</field>
            <field name="perm_unlink">False</field>  <!-- Keine API-Löschung -->
        </record>

        <!-- ===================================================================== -->
        <!-- COMPLIANCE UND AUDIT - Compliance-konforme Sicherheit -->
        <!-- ===================================================================== -->

        <!-- ✅ NEU: GDPR Compliance Rule -->
        <record id="blanket_order_rule_gdpr" model="ir.rule">
            <field name="name">Blanket Order: GDPR Data Access</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="domain_force">[
                '|',
                ('partner_id.is_company', '=', True),
                ('partner_id', '=', user.partner_id.id)
            ]</field>
            <field name="groups" eval="[(4, ref('group_blanket_order_portal'))]"/>
            <field name="perm_read">True</field>
            <field name="perm_write">False</field>
            <field name="perm_create">False</field>
            <field name="perm_unlink">False</field>
        </record>

        <!-- ✅ NEU: Data Retention Policy -->
        <record id="automated_action_data_retention" model="base.automation">
            <field name="name">Blanket Order Data Retention</field>
            <field name="model_id" ref="model_sale_blanket_order"/>
            <field name="state">code</field>
            <field name="trigger">on_time</field>
            <field name="trg_date_range">365</field>  <!-- Jährlich ausführen -->
            <field name="trg_date_range_type">day</field>
            <field name="code">
# ✅ ROBUST: Daten-Aufbewahrung gemäß Compliance
try:
    from datetime import datetime, timedelta
    
    # Finde sehr alte, abgeschlossene Orders (älter als 7 Jahre)
    cutoff_date = fields.Date.today() - timedelta(days=7*365)
    
    old_orders = env['sale.blanket.order'].search([
        ('state', 'in', ['done', 'expired']),
        ('create_date', '&lt;', cutoff_date),
        ('sale_count', '=', 0)  # Keine aktiven Sale Orders
    ])
    
    for order in old_orders:
        try:
            # Archiviere statt löschen für Audit-Trail
            order.active = False
            log(f"COMPLIANCE: Archived old Blanket Order {order.name} (created {order.create_date})")
        except Exception as e:
            log(f"Error archiving order {order.name}: {e}")
            
except Exception as e:
    log(f"Data retention automation error: {e}")
</field>
            <field name="active">True</field>
        </record>

        <!-- ===================================================================== -->
        <!-- MENU SECURITY - Menü-basierte Sicherheit -->
        <!-- ===================================================================== -->

        <!-- Anwenden der Security Groups auf Menüs -->
        <record id="sale_blanket_order.sale_blanket_order_menu" model="ir.ui.menu">
            <field name="groups_id" eval="[(4, ref('group_blanket_order_user'))]"/>
        </record>

        <record id="sale_blanket_order.sale_blanket_order_wizard_menu" model="ir.ui.menu">
            <field name="groups_id" eval="[(4, ref('group_blanket_order_user'))]"/>
        </record>

        <!-- ===================================================================== -->
        <!-- DOKUMENTATION UND RICHTLINIEN -->
        <!-- ===================================================================== -->
        
        <!--
        SICHERHEITS-KONZEPT DOKUMENTATION:
        
        1. BENUTZERGRUPPEN-HIERARCHIE:
           - group_blanket_order_admin: Vollzugriff (System-Admins)
           - group_blanket_order_manager: Management-Ebene (alle Orders)
           - group_blanket_order_user: Standard-Benutzer (eigene Orders)
           - group_blanket_order_readonly: Nur-Lese-Zugriff (Reporting)
           - group_blanket_order_portal: Portal-Benutzer (Kunden)
           - group_blanket_order_api: API-Integration (externe Systeme)
        
        2. RECORD RULES PRINZIPIEN:
           - Principle of Least Privilege: Minimale notwendige Rechte
           - Multi-Company Isolation: Strikte Trennung zwischen Unternehmen
           - Team-based Access: Zugriff basierend auf Sales Teams
           - Owner-based Access: Ersteller haben erweiterte Rechte
           - Follower-based Access: Follower erhalten Leserechte
        
        3. SICHERHEITS-FEATURES:
           - Audit Logging: Alle kritischen Aktionen werden geloggt
           - Access Monitoring: Überwachung verdächtiger Zugriffe
           - GDPR Compliance: Datenschutz-konforme Datenbehandlung
           - Data Retention: Automatische Archivierung alter Daten
           - Field-level Security: Schutz sensibler Felder
        
        4. PORTAL-SICHERHEIT:
           - Kunden sehen nur ihre eigenen Orders
           - Sichere Anhang-Downloads
           - Controlled Message Access
           - GDPR-konforme Datenansicht
        
        5. API-SICHERHEIT:
           - Separate API-Benutzergruppe
           - Eingeschränkte API-Rechte
           - Audit-Logging für API-Zugriffe
           - Rate-Limiting durch Odoo-Framework
        
        ANWENDUNGSBEISPIELE:
        
        # Python Code für sichere Record-Zugriffe:
        def get_accessible_blanket_orders(self):
            # Automatische Anwendung der Record Rules
            orders = self.env['sale.blanket.order'].search([])
            # Gibt nur die für den aktuellen User sichtbaren Orders zurück
            return orders
        
        # Sichere API-Zugriffe:
        @api.model
        def api_create_blanket_order(self, vals):
            # Prüfe API-Berechtigungen
            if not self.env.user.has_group('sale_blanket_order.group_blanket_order_api'):
                raise AccessError("API access required")
            
            # Automatische Company-Zuordnung
            if 'company_id' not in vals:
                vals['company_id'] = self.env.company.id
                
            return self.create(vals)
        
        MIGRATION VON 17.0:
        - Bestehende Berechtigungen werden automatisch migriert
        - Neue Security Groups werden hinzugefügt
        - Record Rules werden erweitert aber bleiben kompatibel
        - Audit-Features sind optional aktivierbar
        
        TROUBLESHOOTING:
        - Bei Zugriffsproblemen: Prüfe Gruppenzugehörigkeit
        - Record Rules Debug: Verwende --log-level=debug
        - Portal-Probleme: Prüfe Partner-Zuordnung
        - API-Fehler: Prüfe API-Gruppenzugehörigkeit
        
        PERFORMANCE-OPTIMIERUNG:
        - Record Rules verwenden Indizes für bessere Performance
        - Company-Filter sind hochoptimiert
        - Audit-Logs verwenden asynchrone Verarbeitung
        - Portal-Zugriffe sind gecacht für bessere Antwortzeiten
        -->

    </data>
</odoo>